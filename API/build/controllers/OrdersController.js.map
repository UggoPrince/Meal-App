{"version":3,"sources":["../../server/controllers/OrdersController.js"],"names":["ordersService","OrdersService","OrdersController","req","res","body","mealId","customerId","catererId","milID","parseInt","custID","catID","helpers","validID","status","send","message","error","addedOrder","add","Date","now","mealID","orderID","params","id","orderIdNum","milId","orderIdExist","exist","modifiedOrder","modify","index","totalOrders","allOrders","getAllOrders"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-console */\r\n\r\nimport OrdersService from '../services/OrdersService';\r\nimport helpers from '../helpers/allHelpers';\r\n\r\nconst ordersService = new OrdersService();\r\n\r\nclass OrdersController {\r\n  addOrder(req, res) {\r\n    const { mealId, customerId, catererId } = req.body;\r\n    if (mealId && customerId && catererId) {\r\n      const milID = parseInt(mealId, 10);\r\n      const custID = parseInt(customerId, 10);\r\n      const catID = parseInt(catererId, 10);\r\n\r\n      if (!helpers.validID(milID)) {\r\n        res.status(200).send({ message: 'error', error: `meal id [${mealId}] is not valid.` });\r\n      } else if (!helpers.validID(custID)) {\r\n        res.status(200).send({ message: 'error', error: `customer id [${customerId}] is not valid.` });\r\n      } else if (!helpers.validID(catID)) {\r\n        res.status(200).send({ message: 'error', error: `caterer id [${catererId}] is not valid.` });\r\n      } else {\r\n        const addedOrder = ordersService.add(milID, custID, catID, Date.now());\r\n        res.status(200).send({ message: 'success', body: addedOrder });\r\n      }\r\n    } else if (!mealId && !customerId && !catererId) {\r\n      res.status(200).send({ message: 'error', error: 'No mealId, customerId and catererId was sent' });\r\n    } else if (!mealId) {\r\n      res.status(200).send({ message: 'error', error: 'No mealId was sent!' });\r\n    } else if (!customerId) {\r\n      res.status(200).send({ message: 'error', error: 'No customerId was sent!' });\r\n    } else if (!catererId) {\r\n      res.status(200).send({ message: 'error', error: 'No catererId was sent!' });\r\n    }\r\n  }\r\n\r\n  modifyOrder(req, res) {\r\n    const mealID = req.body.mealId;\r\n    const orderID = parseInt(req.params.id, 10);\r\n    const orderIdNum = helpers.validID(orderID);\r\n    if (orderIdNum) {\r\n      if (mealID) {\r\n        const milId = parseInt(mealID, 10);\r\n        if (!helpers.validID(milId)) {\r\n          res.status(200).send({ message: 'error', error: 'invalid meal id' });\r\n        } else {\r\n          const orderIdExist = ordersService.orderIdExist(orderID);\r\n          if (orderIdExist.exist) {\r\n            const modifiedOrder = ordersService.modify(orderIdExist.index, milId);\r\n            res.status(200).send({ message: 'success', body: modifiedOrder });\r\n          } else {\r\n            res.status(200).send({ message: 'error', error: `No order with the id [${orderID}]` });\r\n          }\r\n        }\r\n      } else {\r\n        res.status(200).send({ message: 'error', error: 'no meal id was sent.' });\r\n      }\r\n    } else {\r\n      res.status(200).send({ message: 'error', error: 'Invalid Order id.' });\r\n    }\r\n  }\r\n\r\n  getOrders(req, res) {\r\n    const totalOrders = ordersService.totalOrders();\r\n    if (totalOrders < 1) {\r\n      res.status(200).send({ message: 'error', error: 'No orders available.' });\r\n    } else {\r\n      const allOrders = ordersService.getAllOrders();\r\n      res.status(200).send({ message: 'success', body: allOrders });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new OrdersController();\r\n"],"file":"OrdersController.js"}