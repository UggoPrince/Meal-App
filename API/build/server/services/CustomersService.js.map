{"version":3,"sources":["../../../server/services/CustomersService.js"],"names":["CustomersService","customer","customers","custData","findAndCountAll","where","email","password","result","customerData","create"],"mappings":";;;;;;;AAEA;;AACA;;;;;;;;;;;;IAEMA,gB;;;AACJ,8BAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgBC,gBAAhB;AACD;;;;;;;+CAEWC,Q;;;;;;;;uBAEa,KAAKF,QAAL,CAAcG,eAAd,CAA8B;AACjDC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,KAAK,EAAEH,QAAQ,CAACG,KAAlB;AAAyBC,oBAAAA,QAAQ,EAAEJ,QAAQ,CAACI;AAA5C;AAD0C,iBAA9B,C;;;AAAfC,gBAAAA,M;iDAGCA,M;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMIC,Y;;;;;;;;uBAEU,KAAKR,QAAL,CAAcS,MAAd,CAAqBD,YAArB,C;;;AAAfD,gBAAAA,M;kDACCA,M;;;;;;;;;;;;;;;;;;;;;;;;;;eAOE,IAAIR,gBAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport 'babel-polyfill';\r\nimport { customers } from '../models/index';\r\n\r\nclass CustomersService {\r\n  constructor() {\r\n    this.customer = customers;\r\n  }\r\n\r\n  async login(custData) {\r\n    try {\r\n      const result = await this.customer.findAndCountAll({\r\n        where: { email: custData.email, password: custData.password },\r\n      });\r\n      return result;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  async register(customerData) {\r\n    try {\r\n      const result = await this.customer.create(customerData);\r\n      return result;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CustomersService();\r\n"],"file":"CustomersService.js"}