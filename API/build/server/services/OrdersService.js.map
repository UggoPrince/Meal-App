{"version":3,"sources":["../../../server/services/OrdersService.js"],"names":["OrdersService","orders","id","findAndCountAll","where","catererId","result","ID","mealID","custID","mealId","customerId","orderData","create","mealsService","getMealById","meal","caterersService","getCatererById","caterer","order","newMealId","update","returning"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,a;;;AACJ,2BAAc;AAAA;;AACZ,SAAKC,MAAL,GAAcA,aAAd;AACD;;;;;;;+CAEkBC,E;;;;;;;;uBAEM,KAAKD,MAAL,CAAYE,eAAZ,CAA4B;AAC/CC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,SAAS,EAAEH;AAAb;AADwC,iBAA5B,C;;;AAAfI,gBAAAA,M;iDAGCA,M;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMcC,E,EAAIC,M,EAAQC,M;;;;;;;;uBAEZ,KAAKR,MAAL,CAAYE,eAAZ,CAA4B;AAC/CC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEK,EAAN;AAAUG,oBAAAA,MAAM,EAAEF,MAAlB;AAA0BG,oBAAAA,UAAU,EAAEF;AAAtC;AADwC,iBAA5B,C;;;AAAfH,gBAAAA,M;kDAGCA,M;;;;;;;;;;;;;;;;;;;;;AAMX;;;;;;;;;;;;;;;;gDAWUM,S;;;;;;;;uBAEe,KAAKX,MAAL,CAAYY,MAAZ,CAAmBD,SAAnB,C;;;AAAfN,gBAAAA,M;;uBACaQ,sBAAaC,WAAb,CAAyBT,MAAM,CAACI,MAAhC,C;;;AAAbM,gBAAAA,I;;uBACgBC,yBAAgBC,cAAhB,CAA+BZ,MAAM,CAACD,SAAtC,C;;;AAAhBc,gBAAAA,O;kDACC,CAAC;AAAEC,kBAAAA,KAAK,EAAEd;AAAT,iBAAD,EAAoB;AAAEU,kBAAAA,IAAI,EAAJA;AAAF,iBAApB,EAA8B;AAAEG,kBAAAA,OAAO,EAAPA;AAAF,iBAA9B,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMEZ,E,EAAIc,S,EAAWZ,M;;;;;;;;uBAEH,KAAKR,MAAL,CAAYqB,MAAZ,CACnB;AAAEZ,kBAAAA,MAAM,EAAEW;AAAV,iBADmB,EAEnB;AAAEE,kBAAAA,SAAS,EAAE,IAAb;AAAmBnB,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEK,EAAN;AAAUI,oBAAAA,UAAU,EAAEF;AAAtB;AAA1B,iBAFmB,C;;;AAAfH,gBAAAA,M;kDAICA,M;;;;;;;;;;;;;;;;;;;;;;;;;;eAOE,IAAIN,aAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport { orders } from '../models/index';\r\nimport mealsService from './MealsService';\r\nimport caterersService from './CaterersService';\r\n\r\nclass OrdersService {\r\n  constructor() {\r\n    this.orders = orders;\r\n  }\r\n\r\n  async getAllOrders(id) {\r\n    try {\r\n      const result = await this.orders.findAndCountAll({\r\n        where: { catererId: id },\r\n      });\r\n      return result;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  async getOrderByMealCust(ID, mealID, custID) {\r\n    try {\r\n      const result = await this.orders.findAndCountAll({\r\n        where: { id: ID, mealId: mealID, customerId: custID },\r\n      });\r\n      return result;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  /* async orderIdExist(orderId) {\r\n    try {\r\n      const result = await this.orders.findAndCountAll({\r\n        where: { id: orderId },\r\n      });\r\n      return result.count;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  } */\r\n\r\n  async add(orderData) {\r\n    try {\r\n      const result = await this.orders.create(orderData);\r\n      const meal = await mealsService.getMealById(result.mealId);\r\n      const caterer = await caterersService.getCatererById(result.catererId);\r\n      return [{ order: result }, { meal }, { caterer }];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  async modify(ID, newMealId, custID) {\r\n    try {\r\n      const result = await this.orders.update(\r\n        { mealId: newMealId },\r\n        { returning: true, where: { id: ID, customerId: custID } },\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new OrdersService();\r\n"],"file":"OrdersService.js"}