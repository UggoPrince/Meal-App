{"version":3,"sources":["../../../server/controllers/CustomersController.js"],"names":["CustomersController","req","res","customersService","login","body","cust","count","status","send","token","JWT","signToken","data","rows","role","register","errors","err"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,mB;;;;;;;;;;;;+CACcC,G,EAAKC,G;;;;;;;uBACFC,0BAAiBC,KAAjB,CAAuBH,GAAG,CAACI,IAA3B,C;;;AAAbC,gBAAAA,I;;AACN,oBAAIA,IAAI,CAACC,KAAL,KAAe,CAAnB,EAAsB;AACpBL,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,0DAAD,CAArB;AACD,iBAFD,MAEO;AACCC,kBAAAA,KADD,GACSC,aAAIC,SAAJ,CAAc;AAAEC,oBAAAA,IAAI,EAAEP,IAAI,CAACQ,IAAL,CAAU,CAAV,CAAR;AAAsBC,oBAAAA,IAAI,EAAE;AAA5B,mBAAd,CADT;AAELb,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,oBAAAA,KAAK,EAALA;AAAF,mBAArB;AACD;;;;;;;;;;;;;;;;;;;;;gDAGeT,G,EAAKC,G;;;;;;;uBACFC,0BAAiBa,QAAjB,CAA0Bf,GAAG,CAACI,IAA9B,C;;;AAAbC,gBAAAA,I;;AACN,oBAAIA,IAAI,CAACW,MAAT,EAAiB;AACTC,kBAAAA,GADS,GACH,yBAAgBZ,IAAI,CAACW,MAArB,CADG;AAEff,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,GAArB;AACD,iBAHD,MAGO;AACCR,kBAAAA,KADD,GACSC,aAAIC,SAAJ,CAAc;AAAEC,oBAAAA,IAAI,EAAEP,IAAR;AAAcS,oBAAAA,IAAI,EAAE;AAApB,mBAAd,CADT;AAELb,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,oBAAAA,KAAK,EAALA;AAAF,mBAArB;AACD;;;;;;;;;;;;;;;;;;;;;eAIU,IAAIV,mBAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport customersService from '../services/CustomersService';\r\nimport getErrorMessage from '../helpers/allHelpers';\r\nimport JWT from '../helpers/JWT';\r\n\r\nclass CustomersController {\r\n  async getCustomer(req, res) {\r\n    const cust = await customersService.login(req.body);\r\n    if (cust.count === 0) {\r\n      res.status(404).send(['Invalid Customer email and/or password. Simply Register.']);\r\n    } else {\r\n      const token = JWT.signToken({ data: cust.rows[0], role: 'customer' });\r\n      res.status(200).send({ token });\r\n    }\r\n  }\r\n\r\n  async addCustomer(req, res) {\r\n    const cust = await customersService.register(req.body);\r\n    if (cust.errors) {\r\n      const err = getErrorMessage(cust.errors);\r\n      res.status(404).send(err);\r\n    } else {\r\n      const token = JWT.signToken({ data: cust, role: 'customer' });\r\n      res.status(201).send({ token });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CustomersController();\r\n"],"file":"CustomersController.js"}