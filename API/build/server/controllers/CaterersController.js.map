{"version":3,"sources":["../../../server/controllers/CaterersController.js"],"names":["CaterersController","req","res","caterersService","login","body","cat","count","status","send","token","JWT","signToken","data","rows","role","register","errors","err"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,kB;;;;;;;;;;;;+CACaC,G,EAAKC,G;;;;;;;uBACFC,yBAAgBC,KAAhB,CAAsBH,GAAG,CAACI,IAA1B,C;;;AAAZC,gBAAAA,G;;AACN,oBAAIA,GAAG,CAACC,KAAJ,KAAc,CAAlB,EAAqB;AACnBL,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,yDAAD,CAArB;AACD,iBAFD,MAEO;AACCC,kBAAAA,KADD,GACSC,aAAIC,SAAJ,CAAc;AAAEC,oBAAAA,IAAI,EAAEP,GAAG,CAACQ,IAAJ,CAAS,CAAT,CAAR;AAAqBC,oBAAAA,IAAI,EAAE;AAA3B,mBAAd,CADT;AAELb,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,oBAAAA,KAAK,EAALA;AAAF,mBAArB;AACD;;;;;;;;;;;;;;;;;;;;;gDAGcT,G,EAAKC,G;;;;;;;uBACFC,yBAAgBa,QAAhB,CAAyBf,GAAG,CAACI,IAA7B,C;;;AAAZC,gBAAAA,G;;AACN,oBAAIA,GAAG,CAACW,MAAR,EAAgB;AACRC,kBAAAA,GADQ,GACF,yBAAgBZ,GAAG,CAACW,MAApB,CADE;AAEdf,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,GAArB;AACD,iBAHD,MAGO;AACCR,kBAAAA,KADD,GACSC,aAAIC,SAAJ,CAAc;AAAEC,oBAAAA,IAAI,EAAEP,GAAR;AAAaS,oBAAAA,IAAI,EAAE;AAAnB,mBAAd,CADT;AAELb,kBAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,oBAAAA,KAAK,EAALA;AAAF,mBAArB;AACD;;;;;;;;;;;;;;;;;;;;;eAIU,IAAIV,kBAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport caterersService from '../services/CaterersService';\r\nimport getErrorMessage from '../helpers/allHelpers';\r\nimport JWT from '../helpers/JWT';\r\n\r\nclass CaterersController {\r\n  async getCaterer(req, res) {\r\n    const cat = await caterersService.login(req.body);\r\n    if (cat.count === 0) {\r\n      res.status(404).send(['Invalid Caterer email and/or password. Simply Register.']);\r\n    } else {\r\n      const token = JWT.signToken({ data: cat.rows[0], role: 'caterer' });\r\n      res.status(200).send({ token });\r\n    }\r\n  }\r\n\r\n  async addCaterer(req, res) {\r\n    const cat = await caterersService.register(req.body);\r\n    if (cat.errors) {\r\n      const err = getErrorMessage(cat.errors);\r\n      res.status(404).send(err);\r\n    } else {\r\n      const token = JWT.signToken({ data: cat, role: 'caterer' });\r\n      res.status(201).send({ token });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CaterersController();\r\n"],"file":"CaterersController.js"}