{"version":3,"sources":["../../../server/controllers/MealsController.js"],"names":["MealsController","req","res","sentToken","get","JWT","verifyToken","jwt","tokenExp","decode","role","mealsService","getAllMeals","meals","count","status","send","reqBody","name","body","size","price","currency","catererId","data","id","add","addedMeal","errors","err","mealId","params","modify","modMeal","delete","delMeal"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport mealsService from '../services/MealsService';\r\nimport getErrorMessage from '../helpers/allHelpers';\r\nimport JWT from '../helpers/JWT';\r\n\r\nclass MealsController {\r\n  async getMeals(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp && jwt.decode.role === 'caterer') {\r\n        const meals = await mealsService.getAllMeals();\r\n        if (meals.count === 0) {\r\n          res.status(200).send(['No meals yets. Add a meal.']);\r\n        } else {\r\n          res.status(200).send(meals);\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login as a Caterer to get meals.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n\r\n  async addMeal(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp && jwt.decode.role === 'caterer') {\r\n        const reqBody = {\r\n          name: req.body.name,\r\n          size: req.body.size,\r\n          price: req.body.price,\r\n          currency: req.body.currency,\r\n          catererId: jwt.decode.data.id,\r\n        };\r\n        const addedMeal = await mealsService.add(reqBody);\r\n        if (addedMeal.errors) {\r\n          const err = getErrorMessage(addedMeal.errors);\r\n          res.status(400).send(err);\r\n        } else {\r\n          res.status(201).send(addedMeal);\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login as a Caterer to add meals.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n\r\n  async modifyMeal(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp && jwt.decode.role === 'caterer') {\r\n        const mealId = req.params.id;\r\n        const modMeal = await mealsService.modify(req.body, mealId);\r\n        if (modMeal[0] === 0 || modMeal.name === 'SequelizeDatabaseError') {\r\n          res.status(404).send(['Invalid meal id.']);\r\n        } else if (modMeal.errors) {\r\n          const err = getErrorMessage(modMeal.errors);\r\n          res.status(400).send(err);\r\n        } else {\r\n          res.status(200).send(modMeal);\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login as a Caterer to update meals.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n\r\n  async deleteMeal(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp && jwt.decode.role === 'caterer') {\r\n        const mealId = req.params.id;\r\n        const delMeal = await mealsService.delete(mealId);\r\n\r\n        if (delMeal.name === 'SequelizeDatabaseError' || delMeal === 0) {\r\n          res.status(404).send(['Invalid meal id.']);\r\n        } else {\r\n          res.status(200).send(['Meal successfully deleted.']);\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login as Caterer to update meals.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MealsController();\r\n"],"file":"MealsController.js"}