{"version":3,"sources":["../../../server/controllers/OrdersController.js"],"names":["OrdersController","req","res","ordersService","add","body","addedOrder","errors","err","status","send","name","original","detail","modify","mealId","params","id","modOrder","getAllOrders","allOrders","count"],"mappings":";;;;;;;AAGA;;AACA;;;;;;;;;;;;;;IAEMA,gB;;;;;;;;;;;;+CACWC,G,EAAKC,G;;;;;;;uBACOC,uBAAcC,GAAd,CAAkBH,GAAG,CAACI,IAAtB,C;;;AAAnBC,gBAAAA,U;;AAEN,oBAAIA,UAAU,CAACC,MAAf,EAAuB;AACfC,kBAAAA,GADe,GACT,yBAAgBF,UAAU,CAACC,MAA3B,CADS;AAErBL,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,GAArB;AACD,iBAHD,MAGO,IAAIF,UAAU,CAACK,IAAX,KAAoB,wBAAxB,EAAkD;AACvDT,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,yBAAD,CAArB;AACD,iBAFM,MAEA,IAAIJ,UAAU,CAACK,IAAX,KAAoB,oCAAxB,EAA8D;AACnET,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAACJ,UAAU,CAACM,QAAX,CAAoBC,MAArB,CAArB;AACD,iBAFM,MAEA;AACLX,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,UAArB;AACD;;;;;;;;;;;;;;;;;;;;;gDAGeL,G,EAAKC,G;;;;;;;uBACEC,uBAAcW,MAAd,CAAqBb,GAAG,CAACI,IAAJ,CAASU,MAA9B,EAAsCd,GAAG,CAACe,MAAJ,CAAWC,EAAjD,C;;;AAAjBC,gBAAAA,Q;;AACN,oBAAIA,QAAQ,CAACX,MAAb,EAAqB;AACbC,kBAAAA,GADa,GACP,yBAAgBU,QAAQ,CAACX,MAAzB,CADO;AAEnBL,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,GAArB;AACD,iBAHD,MAGO,IAAIU,QAAQ,CAACP,IAAT,KAAkB,wBAAtB,EAAgD;AACrDT,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,iBAAD,CAArB;AACD,iBAFM,MAEA,IAAIQ,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AAC5BhB,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,kBAAD,CAArB;AACD,iBAFM,MAEA;AACLR,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,QAArB;AACD;;;;;;;;;;;;;;;;;;;;;gDAGajB,G,EAAKC,G;;;;;;;uBACKC,uBAAcgB,YAAd,E;;;AAAlBC,gBAAAA,S;;AACN,oBAAIA,SAAS,CAACC,KAAV,KAAoB,CAAxB,EAA2B;AACzBnB,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,sBAAD,CAArB;AACD,iBAFD,MAEO;AACLR,kBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,SAArB;AACD;;;;;;;;;;;;;;;;;;;;;eAIU,IAAIpB,gBAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n\r\nimport ordersService from '../services/OrdersService';\r\nimport getErrorMessage from '../helpers/allHelpers';\r\n\r\nclass OrdersController {\r\n  async addOrder(req, res) {\r\n    const addedOrder = await ordersService.add(req.body);\r\n\r\n    if (addedOrder.errors) {\r\n      const err = getErrorMessage(addedOrder.errors);\r\n      res.status(400).send(err);\r\n    } else if (addedOrder.name === 'SequelizeDatabaseError') {\r\n      res.status(400).send(['An invalid id was sent.']);\r\n    } else if (addedOrder.name === 'SequelizeForeignKeyConstraintError') {\r\n      res.status(404).send([addedOrder.original.detail]);\r\n    } else {\r\n      res.status(201).send(addedOrder);\r\n    }\r\n  }\r\n\r\n  async modifyOrder(req, res) {\r\n    const modOrder = await ordersService.modify(req.body.mealId, req.params.id);\r\n    if (modOrder.errors) {\r\n      const err = getErrorMessage(modOrder.errors);\r\n      res.status(400).send(err);\r\n    } else if (modOrder.name === 'SequelizeDatabaseError') {\r\n      res.status(404).send(['Invalid mealId.']);\r\n    } else if (modOrder[0] === 0) {\r\n      res.status(404).send(['Invalid orderId.']);\r\n    } else {\r\n      res.status(200).send(modOrder);\r\n    }\r\n  }\r\n\r\n  async getOrders(req, res) {\r\n    const allOrders = await ordersService.getAllOrders();\r\n    if (allOrders.count === 0) {\r\n      res.status(200).send(['No orders available.']);\r\n    } else {\r\n      res.status(200).send(allOrders);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new OrdersController();\r\n"],"file":"OrdersController.js"}
