{"version":3,"sources":["../../../server/controllers/MenuController.js"],"names":["menuService","MenuService","MenuController","req","res","body","mealId","catererId","mealNum","menuValidation","MenuValidation","validReqData","validateAddMenu","error","addedMenu","add","Date","now","status","send","menu","message","invalid","menuExist","fields","menus","get"],"mappings":";;;;;;;AAIA;;AACA;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,IAAIC,oBAAJ,EAApB;;IAEMC,c;;;;;;;;;4BACIC,G,EAAKC,G,EAAK;AAAA,sBACcD,GAAG,CAACE,IADlB;AAAA,UACRC,MADQ,aACRA,MADQ;AAAA,UACAC,SADA,aACAA,SADA;AAEhB,UAAMC,OAAO,GAAGF,MAAhB;AACA,UAAMG,cAAc,GAAG,IAAIC,uBAAJ,EAAvB;AACA,UAAMC,YAAY,GAAGF,cAAc,CAACG,eAAf,CAA+BJ,OAA/B,EAAwCD,SAAxC,CAArB;;AAEA,UAAI,CAACI,YAAY,CAACE,KAAlB,EAAyB;AACvB,YAAMC,SAAS,GAAGd,WAAW,CAACe,GAAZ,CAAgBT,MAAhB,EAAwBC,SAAxB,EAAmCS,IAAI,CAACC,GAAL,EAAnC,CAAlB;AACAb,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,IAAI,EAAEN;AAAR,SAArB;AACD,OAHD,MAGO;AACLV,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,UAAAA,OAAO,EAAE,OAAX;AAAoBR,UAAAA,KAAK,EAAEF,YAAY,CAACW;AAAxC,SAArB;AACD;AACF;;;4BAEOnB,G,EAAKC,G,EAAK;AAChB,UAAMmB,SAAS,GAAGvB,WAAW,CAACuB,SAAZ,EAAlB;;AACA,UAAI,CAACA,SAAL,EAAgB;AACdnB,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,UAAAA,OAAO,EAAE,SADU;AAEnBhB,UAAAA,IAAI,EAAE,6EAFa;AAGnBmB,UAAAA,MAAM,EAAE;AAHW,SAArB;AAKD,OAND,MAMO;AACLpB,QAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEM,UAAAA,KAAK,EAAEzB,WAAW,CAAC0B,GAAZ;AAAT,SAArB;AACD;AACF;;;;;;eAGY,IAAIxB,cAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-console */\r\n\r\nimport MenuService from '../services/MenuService';\r\nimport MenuValidation from '../validation/MenuValidation';\r\n\r\nconst menuService = new MenuService();\r\n\r\nclass MenuController {\r\n  addMenu(req, res) {\r\n    const { mealId, catererId } = req.body;\r\n    const mealNum = mealId;\r\n    const menuValidation = new MenuValidation();\r\n    const validReqData = menuValidation.validateAddMenu(mealNum, catererId);\r\n\r\n    if (!validReqData.error) {\r\n      const addedMenu = menuService.add(mealId, catererId, Date.now());\r\n      res.status(201).send({ menu: addedMenu });\r\n    } else {\r\n      res.status(404).send({ message: 'error', error: validReqData.invalid });\r\n    }\r\n  }\r\n\r\n  getMenu(req, res) {\r\n    const menuExist = menuService.menuExist();\r\n    if (!menuExist) {\r\n      res.status(200).send({\r\n        message: 'success',\r\n        body: 'No Menu in your account. Set up a Menu now with the following fields below.',\r\n        fields: ' mealId(s) (one or meal id with the same key name [ mealId ]), and catererId (only one!)',\r\n      });\r\n    } else {\r\n      res.status(200).send({ menus: menuService.get() });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MenuController();\r\n"],"file":"MenuController.js"}