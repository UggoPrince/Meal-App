{"version":3,"sources":["../../../server/controllers/MenuController.js"],"names":["MenuController","req","res","sentToken","get","JWT","verifyToken","jwt","tokenExp","decode","role","meals","body","mealId","mealNO","errMes","i","length","mealsService","getMealById","mealExist","count","push","status","send","reqBody","catererId","data","id","menuService","add","addedMenu","errors","err","name","getAllMenus","menu"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable class-methods-use-this */\r\nimport menuService from '../services/MenuService';\r\nimport mealsService from '../services/MealsService';\r\nimport getErrorMessage from '../helpers/allHelpers';\r\nimport JWT from '../helpers/JWT';\r\n\r\nclass MenuController {\r\n  async addMenu(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp && jwt.decode.role === 'caterer') {\r\n        const meals = req.body.mealId;\r\n        let mealNO = false;\r\n        const errMes = [];\r\n        if (meals) {\r\n          for (let i = 0; i < meals.length; i += 1) {\r\n          // eslint-disable-next-line no-await-in-loop\r\n            const mealExist = await mealsService.getMealById(meals[i]);\r\n            if (mealExist.count === 0) {\r\n              mealNO = true;\r\n              errMes.push(`meal id ${meals[i]} is invalid.`);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (mealNO) res.status(404).send(errMes);\r\n        else {\r\n          const reqBody = {\r\n            mealId: meals,\r\n            catererId: jwt.decode.data.id,\r\n          };\r\n          const addedMenu = await menuService.add(reqBody);\r\n          if (addedMenu.errors) {\r\n            const err = getErrorMessage(addedMenu.errors);\r\n            res.status(400).send(err);\r\n          } else if (addedMenu.name === 'SequelizeDatabaseError') {\r\n            res.status(400).send(['A meal id is invalid.']);\r\n          } else {\r\n            res.status(201).send(addedMenu);\r\n          }\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login as a Caterer to add a Menu.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n\r\n  async getMenu(req, res) {\r\n    const sentToken = req.get('Authorization');\r\n    if (sentToken) {\r\n      const jwt = await JWT.verifyToken(sentToken);\r\n      if (!jwt.tokenExp) {\r\n        const menu = await menuService.getAllMenus();\r\n        if (menu.count === 0) {\r\n          res.status(200).send(['No menu available. Add one.']);\r\n        } else {\r\n          res.status(200).send(menu);\r\n        }\r\n      } else {\r\n        res.status(401).send(['Session expired. Login to view menus.']);\r\n      }\r\n    } else {\r\n      res.status(401).send(['No Authorization header sent. Login and send a token.']);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MenuController();\r\n"],"file":"MenuController.js"}