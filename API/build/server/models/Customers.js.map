{"version":3,"sources":["../../../server/models/Customers.js"],"names":["Customers","customer","sequelize","define","id","type","dataType","INTEGER","primaryKey","autoIncrement","firstname","STRING","allowNull","validate","notEmpty","msg","lastname","address","phone","email","unique","args","isEmail","password","is","len","model","newModel","belongsToMany","through"],"mappings":";;;;;;;AACA;;;;;;;;IAEMA,S;;;AACJ,uBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgBC,sBAAUC,MAAV,CAAiB,UAAjB,EAA6B;AAC3CC,MAAAA,EAAE,EAAE;AACFC,QAAAA,IAAI,EAAEC,qBAASC,OADb;AAEFC,QAAAA,UAAU,EAAE,IAFV;AAGFC,QAAAA,aAAa,EAAE;AAHb,OADuC;AAM3CC,MAAAA,SAAS,EAAE;AACTL,QAAAA,IAAI,EAAEC,qBAASK,MADN;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAE;AAAP;AADF;AAHD,OANgC;AAa3CC,MAAAA,QAAQ,EAAE;AACRX,QAAAA,IAAI,EAAEC,qBAASK,MADP;AAERC,QAAAA,SAAS,EAAE,KAFH;AAGRC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAE;AAAP;AADF;AAHF,OAbiC;AAoB3CE,MAAAA,OAAO,EAAE;AACPZ,QAAAA,IAAI,EAAEC,qBAASK;AADR,OApBkC;AAuB3CO,MAAAA,KAAK,EAAE;AACLb,QAAAA,IAAI,EAAEC,qBAASK;AADV,OAvBoC;AA0B3CQ,MAAAA,KAAK,EAAE;AACLd,QAAAA,IAAI,EAAEC,qBAASK,MADV;AAELS,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcN,UAAAA,GAAG,EAAE;AAAnB,SAFH;AAGLH,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,QAAQ,EAAE;AACRS,UAAAA,OAAO,EAAE;AACPD,YAAAA,IAAI,EAAE,IADC;AAEPN,YAAAA,GAAG,EAAE;AAFE;AADD;AAJL,OA1BoC;AAqC3CQ,MAAAA,QAAQ,EAAE;AACRlB,QAAAA,IAAI,EAAEC,qBAASK,MADP;AAERC,QAAAA,SAAS,EAAE,KAFH;AAGRC,QAAAA,QAAQ,EAAE;AACRW,UAAAA,EAAE,EAAE;AACFH,YAAAA,IAAI,EAAE,CAAC,kBAAD,EAAqB,GAArB,CADJ;AAEFN,YAAAA,GAAG,EAAE;AAFH,WADI;AAKRU,UAAAA,GAAG,EAAE;AACHJ,YAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,CADH;AAEHN,YAAAA,GAAG,EAAE;AAFF;AALG;AAHF;AArCiC,KAA7B,CAAhB;AAoDD;;;;kCAEa;AACZ,aAAO,KAAKd,QAAZ;AACD;;;2CAEsByB,K,EAAOC,Q,EAAU;AACtC,WAAK1B,QAAL,CAAc2B,aAAd,CAA4BF,KAA5B,EAAmC;AAAEG,QAAAA,OAAO,EAAEF;AAAX,OAAnC;AACD;;;;;;eAGY,IAAI3B,SAAJ,E","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport { sequelize, dataType } from './Sequelizer';\r\n\r\nclass Customers {\r\n  constructor() {\r\n    this.customer = sequelize.define('customer', {\r\n      id: {\r\n        type: dataType.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement: true,\r\n      },\r\n      firstname: {\r\n        type: dataType.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n          notEmpty: { msg: 'firstname is required.' },\r\n        },\r\n      },\r\n      lastname: {\r\n        type: dataType.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n          notEmpty: { msg: 'lastname is required.' },\r\n        },\r\n      },\r\n      address: {\r\n        type: dataType.STRING,\r\n      },\r\n      phone: {\r\n        type: dataType.STRING,\r\n      },\r\n      email: {\r\n        type: dataType.STRING,\r\n        unique: { args: true, msg: 'This email is already registered. Login.' },\r\n        allowNull: false,\r\n        validate: {\r\n          isEmail: {\r\n            args: true,\r\n            msg: 'Invalid email.',\r\n          },\r\n        },\r\n      },\r\n      password: {\r\n        type: dataType.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n          is: {\r\n            args: ['^[A-Za-z0-9@_]*$', 'i'],\r\n            msg: 'Password must be leters, numbers, underscore and/or @ symbol.',\r\n          },\r\n          len: {\r\n            args: [8, 20],\r\n            msg: 'Password must be between 8 and 20 characters.',\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  getCustomer() {\r\n    return this.customer;\r\n  }\r\n\r\n  associationWithCaterer(model, newModel) {\r\n    this.customer.belongsToMany(model, { through: newModel });\r\n  }\r\n}\r\n\r\nexport default new Customers();\r\n"],"file":"Customers.js"}